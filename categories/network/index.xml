<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Network on 些许风霜</title><link>https://bitfrost7.github.io/categories/network/</link><description>Recent content in Network on 些许风霜</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>bitfrost</copyright><lastBuildDate>Tue, 02 Apr 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://bitfrost7.github.io/categories/network/index.xml" rel="self" type="application/rss+xml"/><item><title>dpdk学习01—环境搭建</title><link>https://bitfrost7.github.io/p/network/dpdk/01/</link><pubDate>Tue, 02 Apr 2024 00:00:00 +0000</pubDate><guid>https://bitfrost7.github.io/p/network/dpdk/01/</guid><description>&lt;h2 id="什么是dpdk">
&lt;a href="#%e4%bb%80%e4%b9%88%e6%98%afdpdk">#&lt;/a>
什么是dpdk？
&lt;/h2>&lt;p>dpdk是intel开源的一个网络加速工具包，目的是在IA平台上解决高性能网络数据包处理的问题。&lt;br>
传统网络包处理的过程是：&lt;/p>
&lt;ol>
&lt;li>网卡收到数据包&lt;/li>
&lt;li>网卡将帧DMA到内存&lt;/li>
&lt;li>网卡发送硬中断&lt;/li>
&lt;li>cpu响应中断，调用对应函数进行收包&lt;/li>
&lt;li>将ring buffer保存到skb&lt;/li>
&lt;li>内核协议栈处理帧&lt;/li>
&lt;li>用户进程处理报文&lt;/li>
&lt;/ol>
&lt;p>因为传统网络包处理是中断驱动的，所以在大量网络请求下会出现irq风暴，降低处理性能。除此之外还涉及到多次用户态和内核态数据拷贝，降低性能。当时流行的做法是通过硬件来加速网络包处理，但是dpdk的产生证明了通用化硬件在软件极致优化的情况下也能做到达到io的极限。
基于IA处理器的DPDK技术，很好地解决高性能数据包处理的问题，这些技术包括：&lt;/p>
&lt;ul>
&lt;li>通过轮询来处理数据包，避免中断上下文切换的开销&lt;/li>
&lt;li>使用用户态驱动，避免内核态到用户态不必要的内存拷贝和系统调用&lt;/li>
&lt;li>设置cpu亲和性与独占，避免线程在不同核心间频繁切换; 限制某些核心不参与Linux系统调试, 可使线程独占该核心&lt;/li>
&lt;li>利用大页内存降低TLB miss&lt;/li>
&lt;/ul>
&lt;h3 id="dpdk安装">
&lt;a href="#dpdk%e5%ae%89%e8%a3%85">#&lt;/a>
dpdk安装
&lt;/h3>&lt;p>环境：Mac m1，Vmware Fusion 虚拟机，Ubuntu 20.04&lt;br>
版本：dpdk 22.11.4&lt;br>
因为ubuntu已经有了dpdk的二进制源，直接安装即可，如果需要二进制安装，可参考&lt;a class="link" href="https://core.dpdk.org/doc/quick-start/" target="_blank" rel="noopener"
>官方文档&lt;/a>：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">apt install -yq dpdk dpdk-dev dpdk-doc gcc g++
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="配置环境">
&lt;a href="#%e9%85%8d%e7%bd%ae%e7%8e%af%e5%a2%83">#&lt;/a>
配置环境
&lt;/h3>&lt;p>dpdk环境最好配置2张网卡，一个选择桥接，用来配置dpdk开发，一个选择NAT，用来和宿主机连接。cpu选择4核，内存选择8G，按宿主机资源即可。
启动dpdk环境需要3步：&lt;/p>
&lt;ol>
&lt;li>安装uio启动&lt;/li>
&lt;li>将网卡和dpdk绑定&lt;/li>
&lt;li>设置内存大页&lt;/li>
&lt;/ol>
&lt;h4 id="安装驱动">
&lt;a href="#%e5%ae%89%e8%a3%85%e9%a9%b1%e5%8a%a8">#&lt;/a>
安装驱动
&lt;/h4>&lt;p>dpdk一般多采用两种驱动：vfio-pci和igb_uio。&lt;br>
vfio-pci:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">sudo modprobe vfio &amp;amp;&amp;amp; \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo modprobe vfio-pci
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 配置noiommu_mode。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo bash -c &amp;#39;echo 1 &amp;gt; /sys/module/vfio/parameters/enable_unsafe_noiommu_mode&amp;#39;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>igb_uio: ``&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">git clone https://dpdk.org/git/dpdk-kmods
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>下载以后make安装即可&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">pushd dpdk-kmods/linux/igb_uio
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo make
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo depmod &amp;amp;&amp;amp; sudo insmod igb_uio.ko
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">popd
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>或者直接&lt;code>apt install dpdk-kmods-dkms&lt;/code>&lt;/p>
&lt;h4 id="绑定网卡">
&lt;a href="#%e7%bb%91%e5%ae%9a%e7%bd%91%e5%8d%a1">#&lt;/a>
绑定网卡
&lt;/h4>&lt;p>使用dpdk安装自带了工具`dpdk-devbind.py直接配置：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">dpdk-devbind.py -s # 查看网卡绑定状态
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">dpdk-devbind.py -b vfio-pci 0000:03:00.0 # 将0000:03:00.0网卡绑到vfio-pci驱动
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="设置hugepage">
&lt;a href="#%e8%ae%be%e7%bd%aehugepage">#&lt;/a>
设置hugepage
&lt;/h4>&lt;p>x86架构CPU支持2M和1G大小的pagesize，一般linux默认配置了2M的大小，通过&lt;code>cat /proc/meminfo|grep -i huge&lt;/code>来查看。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"># 挂载1G的hugepage
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo mkdir /mnt/huge
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo mount -t hugetlbfs -o pagesize=1G none /mnt/huge
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 设置巨页数量 以下都是在numa节点0上设置 如果设置其他节点可修改路径
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo bash -c &amp;#39;echo 2 &amp;gt; /sys/kernel/mm/hugepages/hugepages-1048576kB/nr_hugepages&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo bash -c &amp;#39;echo 1024 &amp;gt; /sys/kernel/mm/hugepages/hugepages-2048kB/nr_hugepages&amp;#39;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>方便起见，写一个init脚本，方便快速拉起dpdk环境：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">modprobe vfio
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">modprobe vfio-pci
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="m">1&lt;/span> &amp;gt; /sys/module/vfio/parameters/enable_unsafe_noiommu_mode
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">dpdk-devbind.py -b vfio-pci 0000:03:00.0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">dpdk-devbind.py -b vfio-pci 0000:1a:00.0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mount -t hugetlbfs -o &lt;span class="nv">pagesize&lt;/span>&lt;span class="o">=&lt;/span>1G none /mnt/huge
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="m">2&lt;/span> &amp;gt; /sys/kernel/mm/hugepages/hugepages-1048576kB/nr_hugepages
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="m">1024&lt;/span> &amp;gt; /sys/kernel/mm/hugepages/hugepages-2048kB/nr_hugepages
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="第一个测试程序">
&lt;a href="#%e7%ac%ac%e4%b8%80%e4%b8%aa%e6%b5%8b%e8%af%95%e7%a8%8b%e5%ba%8f">#&lt;/a>
第一个测试程序
&lt;/h2>&lt;p>测试程序使用dpdk官方提供的testpmd，测试dpdk网卡绑定 。&lt;br>
测试环境： 两台虚拟机，要求都已经安装了dpdk的环境。&lt;/p>
&lt;h2 id="安装pktgen">
&lt;a href="#%e5%ae%89%e8%a3%85pktgen">#&lt;/a>
安装pktgen
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">git clone git://dpdk.org/apps/pktgen-dpdk
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> pktgen-dpdk/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">meson build
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> build
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ninja
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># app/pktgen 编译出的程序&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mv app/pktgen /usr/local/bin
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="开始测试">
&lt;a href="#%e5%bc%80%e5%a7%8b%e6%b5%8b%e8%af%95">#&lt;/a>
开始测试
&lt;/h2>&lt;p>node1 node2 mac信息&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">node1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">绑定接口名称: ens161, MAC地址: 00:0c:29:a5:21:1e, IP地址: 未分配
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">绑定接口名称: ens256, MAC地址: 00:0c:29:a5:21:14, IP地址: 未分配
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">node2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">绑定接口名称: ens161, MAC地址: 00:0c:29:57:f0:2f, IP地址: 未分配
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">绑定接口名称: ens256, MAC地址: 00:0c:29:57:f0:25, IP地址: 未分配
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol>
&lt;li>在node1 上运行testpmd：&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">dpdk-testpmd -l 0-1 -n &lt;span class="m">1&lt;/span> -- -i
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="2">
&lt;li>将网卡设为只读模式、非混杂模式(这样就只收pktgen发来的包)后开始收包&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">set&lt;/span> fwd rxonly
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">set&lt;/span> promisc all off
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">show port stats all
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">start
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="3">
&lt;li>在node2 运行pktgen 进行发包&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">pktgen -l 0-1 -n &lt;span class="m">3&lt;/span> -- -P -m &lt;span class="s2">&amp;#34;[1].0&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="4">
&lt;li>设置目的mac，发送100个包&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">set&lt;/span> &lt;span class="m">0&lt;/span> dst mac 00:0c:29:a5:21:1e
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">set&lt;/span> &lt;span class="m">0&lt;/span> count &lt;span class="m">100&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">start &lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在node1上执行&lt;code> show port stats all&lt;/code>,此时可以发现其中一张网卡多了6400，pktgen发包默认大小64字节。
执行&lt;code>quit&lt;/code>退出
测试符合预期，环境搭建完成。&lt;/p></description></item></channel></rss>